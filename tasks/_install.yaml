---
# file : _install.yml
# description : install gh runner package


- name: GitHub Actions Runner | Install dependencies
  ansible.builtin.command:
    cmd: "{{ gh_runner_path }}/bin/installdependencies.sh"
    chdir: "{{ gh_runner_path }}"
  become: true
  when:
    # Only install dependencies if the installation directory contains changes,
    # which is indicated in this case by the `unarchive` task.
    - gh_runner_path_unarchived is defined
    - gh_runner_path_unarchived.changed
    - ansible_os_family != 'Darwin'
  tags:
    - install

# Check if the registration token was used before. config.sh executions aren't
# idempotent, if called twice with the very same token and URL it will fail
# asking to remove the host before configuring it.
#
# ["Cannot configure the runner because it is already configured. To
# reconfigure the runner, run 'config.cmd remove' or './config.sh remove' first."]
- name: GitHub Actions Runner | Check if this host URL+token was already registered
  ansible.builtin.stat:
    path: "{{ gh_runner_path }}/hosts/{{ gh_runner_config_token | hash('sha256') }}"
  register: is_this_host_token_registered
  tags:
    - configure

- name: GitHub Actions Runner | Search for abandoned credentials
  ansible.builtin.stat:
    path: "{{ gh_runner_path }}/.credentials"
  register: abandoned_credentials

  # Search only if the host is not registered, which is a clear indicator that
  # any credentials inside that path are from previous executions or expired
  # tokens, since the registration token hash is not matching any state file.
  when: not is_this_host_token_registered.stat.exists

# If abandoned credentials are found AND this host's CURRENT token is not registered, we
# need to uninstall its service + remove it before proceeding, otherwise the
# `config.sh` command to register the node will fail asking to remove it (which
# we are proactively doing here).
- name: GitHub Actions Runner | Pro-activelly uninstall before re-installing

  when:
    - not is_this_host_token_registered.stat.exists
    - abandoned_credentials is defined
    - abandoned_credentials.stat.exists

  tags:
    - configure

  block:
    - name: GitHub Actions Runner | Uninstall previous service
      become: true
      ansible.builtin.command:
        cmd: "{{ gh_runner_path }}/svc.sh uninstall"
        chdir: "{{ gh_runner_path }}"
      changed_when: abandoned_credentials.stat.exists
      when: ansible_os_family != 'Darwin

    - name: GitHub Actions Runner | Remove previous configuration before proceeding
      become: true
      become_user: "{{ gh_runner_service_user }}"
      environment:
        RUNNER_ALLOW_RUNASROOT: "{{ gh_runner_allow_runasroot }}"
      ansible.builtin.command:
        cmd: |-
          {{ gh_runner_path }}/config.sh remove \
            --token {{ gh_runner_config_token }}
        chdir: "{{ gh_runner_path }}"
      changed_when: abandoned_credentials.stat.exists

- name: GitHub Actions Runner | Configure Runner
  become: true
  become_user: "{{ gh_runner_service_user }}"
  environment:
    RUNNER_ALLOW_RUNASROOT: "{{ gh_runner_allow_runasroot }}"
  ansible.builtin.command:
    cmd: |-
      {{ gh_runner_path }}/config.sh \
        --unattended --replace --disableupdate \
        --url {{ gh_runner_config_url }} \
        --token {{ gh_runner_config_token }} \
        --name {{ gh_runner_config_name }} \
        --runnergroup {{ gh_runner_config_runnergroup }} \
        --work {{ gh_runner_workspace_path }} \
        --labels {{ gh_runner_config_labels | join(',') }}
    chdir: "{{ gh_runner_path }}"
  register: config_host_command
  when: not is_this_host_token_registered.stat.exists
  tags:
    - configure

- name: GitHub Actions Runner | Check if path for state files exists
  ansible.builtin.stat:
    path: "{{ gh_runner_path }}/hosts"
  register: registered_hosts_path
  tags:
    - configure

- name: GitHub Actions Runner | Create hosts directory
  ansible.builtin.file:
    path: "{{ gh_runner_path }}/hosts"
    state: directory
    owner: "{{ gh_runner_service_user }}"
    mode: 0755
  become: true
  when: not registered_hosts_path.stat.exists
  tags:
    - configure

# Create a state file to notify next Ansible executions that a given
# registration token was already used. i.e. the is_this_host_token_registered
# variable registered and used in the credential above.
- name: GitHub Actions Runner | Create state file
  become: true
  become_user: "{{ gh_runner_service_user }}"
  ansible.builtin.file:
    path: "{{ gh_runner_path }}/hosts/{{ gh_runner_config_token | hash('sha256') }}"
    state: touch
    mode: 0400
  when:
    - config_host_command is defined
    - config_host_command is success
  tags:
    - configure

- name: GitHub Actions Runner | Install service
  become: true
  ansible.builtin.command:
    cmd: "{{ gh_runner_path }}/svc.sh install {{ gh_runner_service_user }}"
    chdir: "{{ gh_runner_path }}"
  when: ansible_os_family != 'Darwin' and not is_this_host_token_registered.stat.exists
  tags:
    - install

- name: GitHub Actions Runner | Check service status
  become: true
  ansible.builtin.command:
    cmd: "{{ gh_runner_path }}/svc.sh status"
    chdir: "{{ gh_runner_path }}"
  register: gh_runner_service_status
  changed_when: false # never changes, this is just a read-only command
  when: ansible_os_family != 'Darwin
  tags:
    - configure

- name: GitHub Actions Runner | Start service
  become: true
  ansible.builtin.command:
    cmd: "{{ gh_runner_path }}/svc.sh start"
    chdir: "{{ gh_runner_path }}"
  when: ansible_os_family != 'Darwin' and not '"active (running)"' in gh_runner_service_status.stdout
  tags:
    - configure
